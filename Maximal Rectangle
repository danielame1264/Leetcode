public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return 0;
		}
        int width = matrix.length;
        int length = matrix[0].length;
        int max =0;
        int[] height = new int[length];
        
        for(int i=0;i<width;i++){
            for(int j=0;j<length;j++){
                height[j] = matrix[i][j]=='0' ? 0 : height[j]+1;
            }
            max = Math.max(max, helper(height));
        }
        return max;
    }
    // can be used for largest histogram problem
    public int helper(int[] height){
        int max =0;
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i <= height.length; i++) {
            int current = (i == height.length) ? -1 : height[i]; 
            while (!stack.isEmpty() && current <= height[stack.peek()]) {
				int h = height[stack.pop()];
				int w = stack.isEmpty() ? i : i - stack.peek() - 1;
				max = Math.max(max, h * w);
			}
			stack.push(i);
        }
        return max;
    }
}


class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix: return 0
        max_area = 0
        width = len(matrix)
        length = len(matrix[0])
        height = [0 for i in range(len(matrix[0])+1)]
        for i in range(width):
            # every row as a base for histogram
            for j in range(length):
                height[j] = height[j]+1 if matrix[i][j]=='1' else 0
            max_area = max(max_area, self.largestRectangleArea(height))
        return max_area
    

    def largestRectangleArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        stack = []
        area = 0
        i = 0
        height.append(0)
        
        while i<len(height):
            if not stack or height[i]>height[stack[-1]]:
                stack.append(i)
                i+=1
            else:
                cur_index = stack.pop()
                width = i if not stack else i-1-stack[-1]
                area = max(area, width*height[cur_index])
        return area
