public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return 0;
		}
        int width = matrix.length;
        int length = matrix[0].length;
        int max =0;
        int[] height = new int[length];
        
        for(int i=0;i<width;i++){
            for(int j=0;j<length;j++){
                height[j] = matrix[i][j]=='0' ? 0 : height[j]+1;
            }
            max = Math.max(max, helper(height));
        }
        return max;
    }
    // can be used for largest histogram problem
    public int helper(int[] height){
        int max =0;
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i <= height.length; i++) {
            int current = (i == height.length) ? -1 : height[i]; 
            while (!stack.isEmpty() && current <= height[stack.peek()]) {
				int h = height[stack.pop()];
				int w = stack.isEmpty() ? i : i - stack.peek() - 1;
				max = Math.max(max, h * w);
			}
			stack.push(i);
        }
        return max;
    }
}
