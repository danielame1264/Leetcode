public class Solution {
    public String longestPalindrome(String s) {
    	if (s.isEmpty()) {
    		return null;
    	}
     
    	if (s.length() == 1) {
    		return s;
    	}
 
	String longest = s.substring(0, 1);
	for (int i = 0; i < s.length(); i++) {
		// get longest palindrome with center of i
		String tmp = helper(s, i, i);
		if (tmp.length() > longest.length()) {
			longest = tmp;
		}
 
		// get longest palindrome with center of i, i+1
		tmp = helper(s, i, i + 1);
		if (tmp.length() > longest.length()) {
			longest = tmp;
		}
	}
 
	return longest;
}
 
// Given a center, either one letter or two letter, 
// Find longest palindrome
  public String helper(String s, int begin, int end) {
  	while (begin >= 0 && end <= s.length() - 1 && s.charAt(begin) == s.charAt(end)) {
  		begin--;
  		end++;
  	}
  	return s.substring(begin + 1, end);
  }
}

class Solution(object):  # doesn't work b/c TLE
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        arr[i][i] = 1
        arr[i][j] = arr[i+1][j-1] && s[i]==s[j] if j-i > 2
        arr[i][j] = s[i]==s[j] if j-i <= 2
        """
        start = 0
        end = 0
        max = 0
        arr = [[0 for i in range(len(s))] for j in range(len(s))]
        
        for i in range(len(s)):
            arr[i][i] = 1
            for j in range(0,i):
                arr[i][j] = (s[i]==s[j] and (j-i<=2 or arr[i+1][j-1]))
                if arr[i][j] and max<(j-i+1):
                    start = i
                    end = j
                    max = j-i + 1
        return s[start:end]
