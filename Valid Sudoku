public class Solution {
    public boolean isValidSudoku(char[][] board) {
        if(board==null) return false;
        
        ArrayList<boolean[]> rowCheck = new ArrayList<boolean[]>();
        ArrayList<boolean[]> colCheck = new ArrayList<boolean[]>();
        ArrayList<boolean[]> blockCheck = new ArrayList<boolean[]>();
        
        for(int i=0;i<9;i++){
            rowCheck.add(new boolean[9]);
            colCheck.add(new boolean[9]);
            blockCheck.add(new boolean[9]);
        }
        
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.') continue;
                int c = board[i][j]-'1';
                if(rowCheck.get(i)[c]==true || colCheck.get(j)[c]==true || blockCheck.get(i/3*3+j/3)[c]==true) return false;
                else{
                    rowCheck.get(i)[c]=true;
                    colCheck.get(j)[c]=true;
                    blockCheck.get(i/3*3+j/3)[c]=true;
                }
                
                
            }
        }
        return true;
    }
}


class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        row_check = []
        col_check = []
        block_check = []
        
        for i in range(9):
            row_check.append([False for i in range(9)])
            col_check.append([False for i in range(9)])
            block_check.append([False for i in range(9)])
        
        for i in range(9):
            for j in range(9):
                if board[i][j]=='.': continue
                number = int(board[i][j])-1
                if row_check[i][number] or col_check[j][number] or block_check[i/3*3+j/3][number]: return False
                else:
                    row_check[i][number] = True
                    col_check[j][number] = True
                    block_check[i/3*3+j/3][number] = True
        return True
