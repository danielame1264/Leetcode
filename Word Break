class Solution {
public:
    bool wordBreak(string s, unordered_set<string> &dict) {
        s='!'+s;
        int len = s.length();
        vector<bool> feasible(s.length(),false);
        feasible[0]=true;
        for(int i=1;i<len;++i){
            for(int j=0;j<i;++j){
                feasible[i]= feasible[j] &&(dict.find(s.substr(j+1,i-j))!=dict.end());
                if(feasible[i]==true) break;
            }
        }
        return feasible[len-1];
    }
};


# LTE
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: bool
        """
        if len(s)==0: return True
        for i in range(0,len(s)):
            if s[0:i+1] in wordDict:
                if self.wordBreak(s[i+1:], wordDict):
                    return True
        return False

# DP
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: bool
        """
        dp = [False] * (len(s)+1)
        dp[0] = True
        for i in range(1, len(s)+1):
            for j in range(i):
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
        return dp[len(s)]
