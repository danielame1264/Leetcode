class Solution(object):
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)<2: return 0
        A = min(nums)
        B = max(nums)
        bucket_range = max(1, int((B - A - 1) / (len(nums) - 1)) + 1) #ceil( (B - A) / (N - 1) )  Copied, don't really know why
        bucket_len = int((B-A)/bucket_range)+1
        buckets = [None]*bucket_len
        for num in nums:
            bucket_index = int((num-A)/bucket_range)
            if buckets[bucket_index] is None:
                buckets[bucket_index] = {'min':num, 'max':num}
            else:
                buckets[bucket_index]['min'] = min(buckets[bucket_index]['min'], num)
                buckets[bucket_index]['max'] = max(buckets[bucket_index]['max'], num)
        max_gap = 0
        for i in range(len(buckets)):
            if not buckets[i]:
                continue
            j = i+1
            while j<len(buckets) and buckets[j] is None:
                j +=1
            if j<len(buckets):
                max_gap = max(buckets[j]['min']-buckets[i]['max'], max_gap)
            i = j
        return max_gap
        
        
