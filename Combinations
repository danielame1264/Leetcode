class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > res;
        vector<int> sol;
        
        if(n==0 || k==0) return res;
        
        findCom(n, k, 1, res, sol);
        
        return res;
        
    }
    
    void findCom(int n, int k, int pos, vector<vector<int> > &res, vector<int> &sol){
        if(sol.size()==k){
            res.push_back(sol);
            return;
        }
        else{
            for(int i=pos; i<=n ;i++){
                sol.push_back(i);
                findCom( n,  k,  i+1, res, sol);
                sol.pop_back();
            }
        }
    }
};



public class Solution {
    public List<List<Integer>> combine(int n, int k) {

        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        
        comb(n,k,res,list,1);
        return res;

    }
    public void comb(int n,int k, List<List<Integer>> res, List<Integer> list,int pos){
        if(list.size()==k){
            res.add(new ArrayList<Integer>(list));
        } else {
            for(int i=pos;i<=n;i++){
                    list.add(i);
                    comb(n,k,res,list,i+1);
                    list.remove(list.size()-1);
                
            }
        }
    }
}

class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        res = []
        self.count = 0
        
        def dfs(start, cur):
            if self.count == k:
                res.append(cur)
                return
            for i in range(start, n+1):
                self.count+=1
                dfs(i+1, cur+[i])
                self.count-=1
        
        dfs(1, [])
        return res
