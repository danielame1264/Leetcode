class Solution:
    # @return a boolean
    ## have an n*m boolean array
    ## compare with '.' '*' and general case
    ## return dp[-1][-1]
    def isMatch(self, s, p):
        dp = [[False for j in range(len(p) + 1)] for i in range(len(s) + 1)]
        dp[0][0] = True
        for j in range(1,len(p) + 1):
                if p[j-1] == '*':
                    if j >= 2:
                        dp[0][j] = dp[0][j - 2]
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] == '.':   ## first case 
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':                                           #aa *a case                     #.* case
                    dp[i][j] = dp[i][j - 1] or dp[i][j - 2] or (dp[i-1][j] and (s[i-1] == p[j-2] or p[j-2] == '.'))
                else:
                    dp[i][j] = s[i-1] == p[j-1] and dp[i - 1][j - 1]
        return dp[-1][-1]
        
        
class Solution(object):
    def isMatch(self, s, p):
        return self.isMatch_rec(s[::-1], p[::-1])
 
    def isMatch_rec(self, s, p):
        if not p:
            return s == ''
        elif s and (p[0] == s[0] or p[0] == '.'):
            return self.isMatch_rec(s[1:], p[1:])
        elif p[0] == '*':
            if s and (s[0] == p[1] or p[1] == '.'):
                return self.isMatch_rec(s, p[2:]) or self.isMatch_rec(s[1:], p)
            else:
                return self.isMatch_rec(s, p[2:])
        return False
