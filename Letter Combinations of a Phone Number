public class Solution {
     static Map<Character, String> letterMap = new HashMap<Character, String>();
    static{
        letterMap.put('1', "");
        letterMap.put('2', "abc");
        letterMap.put('3', "def");
        letterMap.put('4', "ghi");
        letterMap.put('5', "jkl");
        letterMap.put('6', "mno");
        letterMap.put('7', "pqrs");
        letterMap.put('8', "tuv");
        letterMap.put('9', "wxyz");
    }
    
    public static List<String> letterCombinations(String digits) {
        ArrayList<String> res = new ArrayList<String>();
        char[] tmp = new char[digits.length()];
        
        helper(digits,0,tmp,res);
        
        return res;
    }
    
    public static void helper(String digits,  int position, char[] tmp, ArrayList<String> res){
    	if(position==digits.length()){
    		res.add(new String(tmp));
    		return;
    	}
    	String possibleLetters = letterMap.get(digits.charAt(position));
    	
    	for(int i=0;i<possibleLetters.length();i++){
    		tmp[position]=possibleLetters.charAt(i);
    		helper(digits,position+1,tmp,res);
    	}
    }
    


}


class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        dic = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}
        res = []
        if not digits : return res
        sol = [0]*len(digits)
        self.helper(digits, 0, sol, res, dic)
        return res
                
    def helper(self, digits, position, sol, res, dic):
        if position == len(sol):
            res.append(''.join(sol))
            return
        cur = dic[digits[position]]
        for i in range(len(cur)):
            sol[position] = cur[i]
            self.helper(digits, position+1, sol, res, dic)
