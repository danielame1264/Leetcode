class Solution {
public:
    vector<vector<int> > subsets(vector<int> &S) {
        sort(S.begin(),S.end());
        vector<vector<int> >  res;
        vector<int> sol;
        if(S.size()==0) return res;
        res.push_back(sol);
        int l = S.size();
        for(int i=1;i!=l+1;i++){
            //find combinations for each length of subset
            Combination(S,i,0,res,sol);
        }
        return res;
    }

    void Combination(vector<int> &S, int k, int pos, vector<vector<int> > &res, vector<int> &sol){
        if(sol.size()==k){
            res.push_back(sol);
            return;
        }
        else{
            for(int i=pos; i<S.size(); i++){
                sol.push_back(S[i]);
                Combination( S, k, i+1, res, sol);
                sol.pop_back();
            }
        }
    }
  
};





public class Solution {
    public List<List<Integer>> subsets(int[] S) {
	if (S == null)
		return null;
 
	Arrays.sort(S);
 
	List<List<Integer>> result = new ArrayList<List<Integer>>();
 
	for (int i = 0; i < S.length; i++) {
		List<List<Integer>> temp = new ArrayList<List<Integer>>();
 
		//get sets that are already in result
		for (List<Integer> a : result) {
			temp.add(new ArrayList<Integer>(a));
		}
 
		//add S[i] to existing sets
		for (List<Integer> a : temp) {
			a.add(S[i]);
		}
 
		//add S[i] only as a set
		List<Integer> single = new ArrayList<Integer>();
		single.add(S[i]);
		temp.add(single);
 
		result.addAll(temp);
	}
 
	//add empty set
	result.add(new ArrayList<Integer>());
 
	return result;
}
}


public static ArrayList<ArrayList<Integer>> subsets(int[] S) {
		Arrays.sort(S);
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> list = new ArrayList<Integer>();
		
		subsetsHelper(result, list, S, 0);
		
		return result;
    }
 
	private static void subsetsHelper(ArrayList<ArrayList<Integer>> result,
			ArrayList<Integer> list, int[] s, int position) {
		
		result.add(new ArrayList<Integer>(list));
		
		for (int i = position; i < s.length; i++) {
			list.add(s[i]);
			subsetsHelper(result, list, s, i+1);
			list.remove(list.size() - 1);
		}
	}


class Solution(object):
    import copy
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        res = []
        for i in nums:
            res_from_last_iteration = copy.deepcopy(res)
            for j in res_from_last_iteration:
                j.append(i)
            for j in res_from_last_iteration:
                res.append(j)
            res.append([i])
        res.insert(0,[])
        return res

    def subsets(self, nums):
	nums.sort()
        res = []
        cur = []
        self.dfs(0, nums, res, cur)
        return res

    def dfs(self, start, nums, res, cur):
        res.append(cur[:])
        for i in range(start, len(nums)):
            self.dfs(i+1, nums, res, cur+[nums[i]])
