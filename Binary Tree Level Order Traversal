/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        
        int lev=1;
        int count=0;
        
        vector<pair<TreeNode*,int> > q;
        if(root==NULL) return vector<vector<int> >();
        q.push_back(make_pair(root,lev));
        while(count<q.size()){
            TreeNode *current = q[count].first;
         lev= q[count].second;
            if(current->left) q.push_back(make_pair(current->left,lev+1));
            if(current->right) q.push_back(make_pair(current->right,lev+1));
            count++;
        } 
        vector<vector<int> > res(lev,vector<int>()); 
        for(int i=0; i<q.size();i++){
            res[q[i].second-1].push_back(q[i].first->val);
        }
        return res;
        
    }
};


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<TreeNode> currentLevel = new ArrayList<TreeNode>();
        List<Integer> level = new ArrayList<Integer>();
        int currentCount = 1;
        int nextCount =0 ;
        if(root==null) return res;
        currentLevel.add(root);
        
        while(currentLevel.size()!=0){
            TreeNode cur = currentLevel.remove(0);
            level.add(cur.val);
            currentCount--;
            if(cur.left!=null){
                currentLevel.add(cur.left);
                nextCount++;
            } 
            if(cur.right!=null){
                currentLevel.add(cur.right);
                nextCount++;
            } 
            
            if(currentCount==0){    
                res.add(new ArrayList<Integer>(level));
                currentCount=nextCount;
                nextCount=0;
                level = new ArrayList<Integer>();
            }
        }
       
        return res;
    }
}
