public class LRUCache {
    public int capacity;
    public LinkedHashMap<Integer,Integer> map; 
    public LRUCache(int capacity) {
        map = new LinkedHashMap<Integer,Integer>();
        this.capacity = capacity;
    }
    
    public int get(int key) {
        int value = -1;
        if(map.containsKey(key)){
            value = map.get(key);
            map.remove(key);
            map.put(key,value);
        }
        return value;
        
    }
    
    public void set(int key, int value) {
        if(map.containsKey(key)){
            map.remove(key);
        } else if(capacity == map.size()){
            for(int key : map.keySet()){
                map.remove(key);
                break;
            }
        }
        map.put(key,value);
    }
}






public class LRUCache {  
    HashMap<Integer, Node> map;  
    Node head, tail;  
    int size;  
    //使用双向链表和map，map将k对应与链表的节点  
    //链表里保存k和value  
    public LRUCache(int capacity) {  
         map = new HashMap<Integer, Node>(capacity);  
         size = capacity;  
         head = new Node(-1, -1);  
         tail = new Node(1, 1);  
         head.next = tail;  
         tail.pre = head;  
    }  
      
    public int get(int key) {  
        //如果map里面有key，那么链表里面也有k  
        //取出节点的val，并把节点放到队首  
        if (map.containsKey(key)) {  
            Node p = map.get(key);  
            putToHead(p);  
            return p.val;  
        }  
        else   
            return -1;  
    }  
      
    public void set(int key, int value) {  
        //如果map里面有，只更新val  
        if (map.containsKey(key)) {  
            Node p = map.get(key);  
            p.val = value;  
            putToHead(p);  
        }  
        //如果map里没有而且没有超过capacity  
        //链表和map里面插入新的节点。  
        else if (map.size() < size){  
            Node p = new Node(key, value);  
            putToHead(p);  
            map.put(key, p);  
        }  
        //如果map里没有，且达到capacity  
        //移除队尾，将新节点插到队首，并且移除map里面的k  
        else {  
            Node p = new Node(key, value);  
            putToHead(p);  
            map.put(key, p);  
            int tmpk = removeEnd();  
            map.remove(tmpk);  
        }  
    }  
      
    private int removeEnd() {  
        Node p = tail.pre;  
        tail.pre.pre.next = tail;  
        tail.pre = p.pre;  
        p.pre = null;  
        p.next = null;  
        return p.k;  
    }  
  
    private void putToHead(Node p) {  
        if(p.next != null && p.pre != null) {  
            p.pre.next = p.next;  
            p.next.pre = p.pre;  
        }  
        p.pre = head;  
        p.next = head.next;  
        head.next.pre = p;  
        head.next = p;  
    }  
      
}  
  
class Node {  
    Node pre;  
    Node next;  
    int k;  
    int val;  
    Node(int k, int val) {  
        this.k = k;  
        this.val = val;  
    }  
}  
