/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode cursor = head;
        //ListNode fake = head;
        ListNode remove = head;
        int tmp = 0;
        while(tmp<n){
            cursor=cursor.next;
            tmp++;
        }
        if(cursor==null){// the one to be deleted is the first one
            head=head.next;
            return head;
        }
        
        while(cursor.next!=null){
            remove = remove.next;
            cursor = cursor.next;
        }
        if(remove.next.next!=null)
         remove.next= remove.next.next;
        else remove.next=null;
        return head;
    }
}


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        dummy=ListNode(0); dummy.next=head
        p1=p2=dummy
        for i in range(n): p1=p1.next
        while p1.next:
            p1=p1.next; p2=p2.next
        p2.next=p2.next.next
        return dummy.next
        
    # def removeNthFromEnd(self, head, n):
    #     """
    #     :type head: ListNode
    #     :type n: int
    #     :rtype: ListNode
    #     """
    #     fast = head
    #     slow = head
    #     if head.next == None: return None
    #     if n ==1:
    #         while slow.next.next:
    #             slow = slow.next
    #         slow.next = slow.next.next
    #         return head
        
    #     for i in range(n-1):
    #         fast = fast.next
    #     while fast.next:
    #         fast = fast.next
    #         slow = slow.next
    #     if slow.next:
    #         slow.val = slow.next.val
    #         slow.next = slow.next.next
    #     else: # supposed to handle n==1 
    #         slow = None
    #     return head
