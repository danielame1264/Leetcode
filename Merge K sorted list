/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if(lists.size()==0) return null;
        
        PriorityQueue<ListNode> heap = new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){
			@Override
			public int compare(ListNode n1, ListNode n2) {
				if(n1.val>n2.val) return 1;
				else if(n1.val<n2.val) return -1;
				else return 0;
			}
            }
            );
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
       
        for(ListNode listNode :lists){
            if(listNode!=null){
                heap.add(listNode);
            }
        }
        
        while(!heap.isEmpty()){
        	ListNode toAdd = heap.poll();
        	if(toAdd.next!=null){
        	    heap.add(toAdd.next);
        	}
        	
        	cur.next=toAdd;
        	cur=cur.next;
        }
        
        
        cur=null;
        
        return dummy.next;
    }
}


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if len(lists)==0 or not lists: return None
        numList = len(lists)
        return self.helper(lists, 0, numList-1)
        
    def helper(self, lists, start, end):
        if end-start==1:
            return self.mergeTwoLists(lists[start], lists[end])
        elif end-start ==0:
            return self.mergeTwoLists(lists[start], None)
        else:
            return self.mergeTwoLists(self.helper(lists, start, int((start+end)/2)-1), self.helper(lists, int((start+end)/2), end))
            
        
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        header = ListNode(0)
        dummy = header
        while l2!=None and l1!=None:
            if l1.val<=l2.val:
                header.next = l1
                header = header.next
                l1 = l1.next
            elif l2.val<l1.val:
                header.next = l2
                header = header.next
                l2 = l2.next
            
        if l1:
            header.next = l1
        elif l2:
            header.next = l2
        return dummy.next



def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        # now let's use python's priority queue to do it.Good old way
        header = ListNode(0)
        dummy = header
        heap = []
        if len(lists)==0 or not lists: return None
        for node in lists:
            if node:
                heap.append((node.val, node))
        heapq.heapify(heap)
        
        while len(heap)>0:
            pop = heapq.heappop(heap)
            header.next = pop[1]
            header = header.next
            
            if pop[1].next:
                heapq.heappush(heap, (pop[1].next.val,pop[1].next))
        
        return dummy.next
