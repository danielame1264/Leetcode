public class Solution {
    public void solveSudoku(char[][] board) {
        if(board==null) return;
        solve(board);
        
    }
    
    // making this solve function boolean makes it easier to call the next round, rather than passing an index indicating i am moving to the next cell
    public boolean solve(char[][] board){    
        for(int i =0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='.'){
                
                for(char k='1';k<='9';k++){
                    if(isValid(k,board,i,j)){
                        board[i][j]=k;
                        if(solve(board)){
                            return true;
                        } 
                        else{
                            board[i][j]='.';
                        }
                    }
                }
                
                return false;
            }
            }
        }
        return true;
    }
    
    public boolean isValid(char k, char[][]board,int i, int j){
        for(int m=0;m<board[i].length;m++){
            if(board[i][m]==k) return false;
        }
        
        for(int m=0;m<board.length;m++){
            if(board[m][j]==k) return false;
        }
        
        for( int m=i/3*3; m<i/3*3+3 ; m++){
            for(int n=j/3*3; n<j/3*3+3 ; n++){
                if(board[m][n]==k ) return false;
            }
        }
        return true;
        
    }
    

    
    
}

class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        def isValid(x,y):
            tmp=board[x][y]; board[x][y]='D'
            for i in range(9):
                if board[i][y]==tmp: return False
            for i in range(9):
                if board[x][i]==tmp: return False
            for i in range(3):
                for j in range(3):
                    if board[(x/3)*3+i][(y/3)*3+j]==tmp: return False
            board[x][y]=tmp
            return True
        def dfs(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j]=='.':
                        for k in '123456789':
                            board[i][j]=k
                            if isValid(i,j) and dfs(board):
                                return True
                            board[i][j]='.'
                        return False
            return True
        dfs(board)
