/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        ListNode dummy = new ListNode(0);
        dummy.next=head;
        head=dummy;
        
        ListNode i=head;

        while(i.next!=null){
            ListNode j=i.next;
            while(j.next!=null && j.val==j.next.val){
                j=j.next;
                }
            if(j!=i.next){
                i.next=j.next;
            }    
            else{
                i=i.next;
                
            }
        }
        return head.next;
    }
}


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(-1)
        dummy.next = head
        p = dummy
        
        while p.next and p.next.next:
            tmp = p.next
            if tmp.val == tmp.next.val:
                while tmp and tmp.next and tmp.val == tmp.next.val:
                    tmp = tmp.next
                p.next = tmp.next
            else:
                p = p.next
        return dummy.next
