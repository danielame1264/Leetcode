/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
/*        map<int,int> inorderMap;
        for(auto i=0;i!=inorder.size();i++){
            inorderMap[inroder[i]]=i;
        }
        int offset = inorderMap[preorder[0]]; // position of root in inorder traversal
        return helper(preorder,offset,0); */
        return helper(preorder,inorder,0,inorder.size()-1,0);
    }
    
    TreeNode* helper(vector<int> &preorder, vector<int> &inorder, int inStart, int inEnd, int preStart){
        if(inStart>inEnd) return NULL;
        TreeNode* root = new TreeNode(preorder[preStart]);
        int rootPos;
        for(int i=inStart;i<=inEnd;i++){
            if(root->val == inorder[i]){
                rootPos = i;
                break;
            }
        }
        root->left=helper(preorder, inorder, inStart, rootPos-1, preStart+1);
        root->right=helper(preorder, inorder, rootPos+1, inEnd, preStart+rootPos+1-inStart);
        return root;
    }  
};


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    # def buildTree(self, preorder, inorder):
    #     """
    #     :type preorder: List[int]
    #     :type inorder: List[int]
    #     :rtype: TreeNode
    #     """
    #     if not preorder or not inorder: return None
    #     root = TreeNode(preorder[0])
        
    #     inorder_index = inorder.index(preorder[0])
        
    #     root.left = self.buildTree(preorder[1:1+inorder_index], inorder[0:inorder_index])
    #     root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])
    #     return root
        
    def bst(self, preorder, inorder):
        if len(preorder) == 0 or len(inorder) == 0:
            return None
        root = TreeNode(preorder[0])
        idx = inorder.index(preorder[0])
        preorder.pop(0)
        root.left = self.bst(preorder, inorder[0:idx]) 
        root.right = self.bst(preorder, inorder[idx+1:])
        return root
     
     
    def buildTree(self, preorder, inorder):
        return self.bst(preorder, inorder)
