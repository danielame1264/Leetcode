public class Solution{
private static final int maxDiv10 = Integer.MAX_VALUE / 10;

public int atoi(String str) {
   int n = str.length();
   int i = 0;
   while (i < n && Character.isWhitespace(str.charAt(i))) i++;
   int sign = 1;
   if (i < n && str.charAt(i) == '+') {
      i++;
   } else if (i < n && str.charAt(i) == '-') {
      sign = -1;
      i++;
   }
   int num = 0;
   while (i < n && Character.isDigit(str.charAt(i))) {
      int digit = Character.getNumericValue(str.charAt(i));
      if (num > maxDiv10 || num == maxDiv10 && digit >= 8) {
         return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
      }
      num = num * 10 + digit;
      i++;
   }  
   return sign * num;
}


class Solution(object):
    def myAtoi(self, str):
        """
        :type str: str
        :rtype: int
        """
        pointer = 0
        isNegative = False
        while pointer<len(str) and str[pointer]==' ':
            pointer += 1
        if pointer==len(str):
            return 0
        if str[pointer] == '-':
            isNegative = True
            pointer += 1
        elif str[pointer] == '+':
            isNegative = False
            pointer += 1
        solution = 0
        for pointer in range(pointer, len(str)):
            if not str[pointer].isdigit():
                break
            else:
                solution *= 10
                solution += int(str[pointer])
                
        #This is because leetcode question is not prepared to Python but to Java/C so we truncate it
        if not isNegative and solution > 2147483647:
            return 2147483647
        elif isNegative and solution > 2147483648:
            return -2147483648
            
        if isNegative:
            return -1 * solution;
        else:
            return solution;


}
