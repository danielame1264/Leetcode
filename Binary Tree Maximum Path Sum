/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int max;
    
    public int maxPathSum(TreeNode root) {
        // copied from program creek , nice solution ever
        max = (root==null)? 0:root.val;
        findMax(root);
        return max;
    }
    // findMax return one path sum , path rooted 
    public int findMax(TreeNode root){
        if(root==null) return 0;
        
        int left = Math.max(findMax(root.left),0);
        int right = Math.max(findMax(root.right),0);
        
        max = Math.max(root.val+left+right,max);
        
        return Math.max(root.val+right, root.val+left);
        
    }
    
    
}

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        every node as end node
        """
        self.max_sum = -sys.maxint - 1
        self.helper(root)
        return self.max_sum
        
    def helper(self, root):
        if not root: return 0
        left_max = max(self.helper(root.left),0)
        right_max = max(self.helper(root.right),0)
        self.max_sum = max(self.max_sum, left_max+right_max+root.val)
        return max(left_max, right_max) + root.val
        
        
