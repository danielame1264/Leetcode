/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
        stack<TreeNode*> s;
        vector<int> res;
        if(!root) return res;
        s.push(root);
        
        while(!s.empty()){
            TreeNode* cur=s.top();
            res.push_back(cur->val);
            s.pop();
            if(cur->right) s.push(cur->right);
            if(cur->left) s.push(cur->left); 
            
            
        }
       return res; 
    }
};



# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        # iterative
        stack = []
        res = []
        if not root: return res
        stack.append(root)

        while len(stack)>0:
            current = stack[-1]
            res.append(current.val)
            stack = stack[:-1]
            if current.right:
                stack.append(current.right)
            if current.left:
                stack.append(current.left)
        return res 
