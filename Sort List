# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# let's do a merge sort
class Solution(object):
    
    def merge(self, head1, head2):
        if not head1: return head2
        if not head2: return head1
        dummy = ListNode(1)
        dummy2 = dummy
        while head1 and head2:
            if head1.val>head2.val:
                dummy.next = head2
                head2 = head2.next
                dummy = dummy.next
            else:
                dummy.next = head1
                head1 = head1.next
                dummy = dummy.next
        if head1:
            dummy.next = head1
        if head2:
            dummy.next = head2
        return dummy2.next
        
        
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        slow = head; fast = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        head1=head
        head2=slow.next
        slow.next = None
        head1 = self.sortList(head1)
        head2 = self.sortList(head2)
        head = self.merge(head1, head2)
        return head
        
