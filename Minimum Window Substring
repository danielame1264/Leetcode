public class Solution {
 
    // copied from a blog 
    public String minWindow(String S, String T) {
        if (S == null || S.length() == 0 || T == null || T.length() == 0)
            return "";
        int m = T.length(), n = S.length();
 
        // Preprocessing: count the number of appearance of each unique character in T
        HashMap<Character, Integer> stat = new HashMap<Character, Integer>();
        for (int i = 0; i < m; i++) {
            char c = T.charAt(i);
            if (stat.containsKey(c))
                stat.put(c, stat.get(c)+1);
            else
                stat.put(c, 1);
        }
 
        int matches = 0;        // Current number of matches
        int minimumBegin = -1, minimumEnd = n;  // Indices of the minimum window
        int begin = 0, end = 0;     // Indices of the working window
        for (; end < n; end++) {       // Move the right side of the working window
            // Move end to the next position where S[end] appears in T
            char endChar = S.charAt(end);
            if (!stat.containsKey(endChar))     // Ignore characters not in T
                continue;
            // Update stat, and matches if necessary
            stat.put(endChar, stat.get(endChar)-1); // Decrement the corresponding desired appearance
            if (stat.get(endChar) >= 0)     // The current matched character is not redundant
                matches++;
            // S[begin...end] meets the requirement
            while (matches == m) {
                // Move begin to the next position where S[begin] appears in T
                char beginChar = S.charAt(begin);
                while (!stat.containsKey(beginChar))
                    beginChar = S.charAt(++begin);

                // A possible minimum window is found
                if (stat.get(beginChar) ==0) {
                    if (end-begin < minimumEnd-minimumBegin) {
                        minimumBegin = begin;
                        minimumEnd = end;
                    }
                    matches--;
                }
                // Move the left side of the working window
                begin++;
                
                // Update stat
                stat.put(beginChar, stat.get(beginChar)+1);
                // S[begin+1...end] lacks a character same as S[begin]
            }
        }
 
        if (minimumBegin >= 0)      // A minimum such window was found
            return S.substring(minimumBegin, minimumEnd+1);
        else        // No such window was found
            return "";
    }
}


class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        need_map = {x:t.count(x) for x in t}
        
        count=len(t)
        start=0; minSize=100000; minStart=0
        for end in range(len(s)):
            if s[end] in t:
                if need_map[s[end]]>=1:
                    count-=1
                need_map[s[end]]-=1

            if count==0:
                while True:
                    if s[start] in t:
                        if need_map[s[start]]<0:
                            need_map[s[start]]+=1
                        else:
                            break
                    start+=1
                if minSize>end-start+1:
                    minSize=end-start+1; minStart=start
        if minSize==100000: return ''
        else:
            return s[minStart:minStart+minSize]
