/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        //vector<vector<int> > res = new vector<vector<int> >();
        vector<vector<int> > res;
        //vector<int> util = new vector<int>();
        vector<int> util;
        pathSumHelper(root,sum,res,util);
        return res;
    }
    
    int vectorSum(vector<int> v){
        int sum=0;
        for(auto i=v.begin(); i!=v.end();i++){
            sum+=*i;
        }
        return sum;
    }
    
    void pathSumHelper(TreeNode *root, int sum, vector<vector<int> > &res, vector<int> &util){
        if(!root) return;
        util.push_back(root->val);
        if(root->left==NULL && root->right==NULL){
            if(vectorSum(util)==sum){
                res.push_back(util);
            }
        }
        pathSumHelper(root->left,sum, res, util);
        pathSumHelper(root->right,sum, res, util);
        util.pop_back();
        
        
    }
    
};

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root: return []
        res = []
        current = [root.val]
        self.helper(root, sum-root.val, current, res)
        return res
        
    def helper(self, root, sum, current, res):
        if not root.left and not root.right and sum==0:
            res.append(current)
        if root.left:
            self.helper(root.left, sum-root.left.val, current+[root.left.val], res)
        if root.right:
            self.helper(root.right, sum-root.right.val, current+[root.right.val], res)
