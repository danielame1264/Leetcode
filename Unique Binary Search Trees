ass Solution {
public:
    int numTrees(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        int total=0;
        for(int i=1; i<=n; i++){ // for each one as root
            // left posiiblities and right possiblities
            int left= i-1;
            int right=n-i;
            
           // if(right=0) total += numTrees(left);
            //else if(left =0) total += numTrees(right);
             if (left == 0 || right ==0 ) total+= max(numTrees(left),numTrees(right)) ;

            //else if (left == 1) total += numTrees(right);
            else  total += numTrees(right) * numTrees(left);
        }
        return total;
    }
};

class Solution(object):
    dp = {0:1, 1:1, 2:2} 
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n in self.dp: return self.dp[n]  
        else:  
            ans = 0
            for i in range(0,n):
                num_left = self.numTrees(i)
                num_right = self.numTrees(n-i-1)
                if i not in self.dp:
                    self.dp[i]=num_left
                if n-i-1 not in self.dp:
                    self.dp[n-i-1] = num_right
                ans += num_left*num_right
            return ans 
