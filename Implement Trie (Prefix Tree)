
class TrieNode(object):
    def __init__(self, c=None):
        """
        Initialize your data structure here.
        """
        self.cur_char = c
        self.is_word = False
        self.next_array = []

class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        if not word: return
        dumb_root = self.root
        for i, c in enumerate(word):
            temp_char_array = [ n.cur_char for n in dumb_root.next_array]
            if c not in temp_char_array:
                node = TrieNode(c)
                dumb_root.next_array.append(node)
                temp_char_array.append(c)
            dumb_root = dumb_root.next_array[temp_char_array.index(c)]
            if i == len(word)-1:
                dumb_root.is_word = True
                
            
                
    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        node = self.root
        for w in word:
            temp_char_array = [ n.cur_char for n in node.next_array]
            if w in temp_char_array:
                node = node.next_array[temp_char_array.index(w)]
            else:
                return False
        return node.is_word
            

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie
        that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        
        node = self.root
        for w in prefix:
            temp_char_array = [ n.cur_char for n in node.next_array]
            if w in temp_char_array:
                node = node.next_array[temp_char_array.index(w)]
            else:
                return False
        # now we have traversed prefix and are at a new node
        return True


# Your Trie object will be instantiated and called as such:
# trie = Trie()
# trie.insert("somestring")
# trie.search("key")




class TrieNode:
    # Initialize your data structure here.
    def __init__(self):
        self.childs = dict()
        self.isWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    # @param {string} word
    # @return {void}
    # Inserts a word into the trie.
    def insert(self, word):
        node = self.root
        for letter in word:
            child = node.childs.get(letter)
            if child is None:
                child = TrieNode()
                node.childs[letter] = child
            node = child
        node.isWord = True

    # @param {string} word
    # @return {boolean}
    # Returns if the word is in the trie.
    def search(self, word):
        node = self.root
        for letter in word:
            node = node.childs.get(letter)
            if node is None:
                return False
        return node.isWord

    # @param {string} prefix
    # @return {boolean}
    # Returns if there is any word in the trie
    # that starts with the given prefix.
    def startsWith(self, prefix):
        node = self.root
        for letter in prefix:
            node = node.childs.get(letter)
            if node is None:
                return False
        return True
