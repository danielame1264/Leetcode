/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
class Solution {
public:
    static bool comparable(const Interval &Interval1, const Interval Interval2){
        return Interval1.start < Interval2.start;
    }
    
    vector<Interval> merge(vector<Interval> &intervals) {
        if((intervals.size()==0) || (intervals.size()==1)) return intervals;
        sort(intervals.begin(),intervals.end(),comparable); 
 /*       auto i= intervals.begin();
        auto j=i+1;
        while(j!=intervals.end()&& i!=intervals.end()){
            if(i->end > j->end){
                j=intervals.erase(j);
            }
            else if(i->end > j->start){
                j->start = i->start;
                i=intervals.erase(i);
                j++;
            }
            else {
                i++;
                j++;
            }
        }
        */  //inplace somehow incorrect
        vector<Interval> res;
        res.push_back(intervals[0]);
        for(auto i=1;i!=intervals.size();i++){
            if(res.back().end >= intervals[i].start){
                res.back().end = max(res.back().end, intervals[i].end);
            }
            else{
                res.push_back(intervals[i]);
            }
        }
        
        return res;
    }
};



/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.isEmpty()) return new ArrayList<Interval>();
        ArrayList<Interval> result = new ArrayList<Interval>();
       
        
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval l, Interval r){
                if(l.start<r.start) return -1;
                else if (l.start>r.start) return 1;
                else return 0;
            }
            });
         result.add(intervals.get(0));
        for(int i=1;i<intervals.size();i++){
            if(  (result.get(result.size()-1).end)< (intervals.get(i).start)  ){
                result.add( intervals.get(i) );
            }
            else{
                //result.get(result.size()-1).start = Math.min(intervals.get(i).start,result.get(result.size()-1).start);
                result.get(result.size()-1).end = Math.max(result.get(result.size()-1).end,intervals.get(i).end);
            }
        }
        return result;
        
    }
}
