/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null) return null;
        
        LinkedList<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode,UndirectedGraphNode> map = new HashMap<UndirectedGraphNode,UndirectedGraphNode>();
        
        UndirectedGraphNode head = new UndirectedGraphNode(node.label);
        queue.add(node);
        map.put(node,head);
        
        while(!queue.isEmpty()){
            
            UndirectedGraphNode current = queue.poll();
            ArrayList<UndirectedGraphNode> neighborList = (ArrayList<UndirectedGraphNode>)current.neighbors;
            
            for(UndirectedGraphNode nei : neighborList){
            if(!map.containsKey(nei)){
                UndirectedGraphNode copy = new UndirectedGraphNode(nei.label);
                map.put(nei,copy);
                map.get(current).neighbors.add(copy);
                queue.add(nei);
                
            }
            else{
                map.get(current).neighbors.add(map.get(nei));
            }
            }
        }
        
        return head;
    }
}


