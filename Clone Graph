/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null) return null;
        
        LinkedList<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode,UndirectedGraphNode> map = new HashMap<UndirectedGraphNode,UndirectedGraphNode>();
        
        UndirectedGraphNode head = new UndirectedGraphNode(node.label);
        queue.add(node);
        map.put(node,head);
        
        while(!queue.isEmpty()){
            
            UndirectedGraphNode current = queue.poll();
            ArrayList<UndirectedGraphNode> neighborList = (ArrayList<UndirectedGraphNode>)current.neighbors;
            
            for(UndirectedGraphNode nei : neighborList){
            if(!map.containsKey(nei)){
                UndirectedGraphNode copy = new UndirectedGraphNode(nei.label);
                map.put(nei,copy);
                map.get(current).neighbors.add(copy);
                queue.add(nei);
                
            }
            else{
                map.get(current).neighbors.add(map.get(nei));
            }
            }
        }
        
        return head;
    }
}



def cloneGraph(self, node):
        """
        :type node: UndirectedGraphNode
        :rtype: UndirectedGraphNode
        """
        # if not node: return node
        # node_map = {}
        
        # new_node = UndirectedGraphNode(node.label)
        # node_map[new_node.label] = new_node
        # q = [node]
        
        # while q:
        #     head = q.pop(0)
        #     for n in head.neighbors:
        #         if n.label not in node_map:
        #             new_n = UndirectedGraphNode(n.label)
        #             node_map[n.label] = new_n
        #             q.append(n)
                    
        #         node_map[head.label].neighbors.append(node_map[n.label])
                
        # return new_node
        
        def dfs(input, map):
            if input in map:
                return map[input]
            output = UndirectedGraphNode(input.label)
            map[input] = output
            for neighbor in input.neighbors:
                output.neighbors.append(dfs(neighbor, map))
            return output
            
        if node == None: return None
        return dfs(node, {})
