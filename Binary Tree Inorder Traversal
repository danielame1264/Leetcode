/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> res;
        if(!root) return res;
        
        stack<TreeNode*> s;
        TreeNode* cur = root;
        //s.push(root);
        bool done = false;
        while(!done){
            if(cur){
                s.push(cur);
                cur=cur->left;
            }
            else{
                if(s.empty()){
                    done=true;
                }
                else{
                    cur = s.top();
                    res.push_back(cur->val);
                    s.pop();
                    cur=cur->right;
                }
            }
        }
    }
};


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        stack = []
        if not root: return res
        #stack.append(root)
        current =root
        while len(stack)>0 or current!=None:
            if current:
                stack.append(current)
                current = current.left
            else:
                top = stack.pop()
                res.append(top.val)
                current = top.right
 
            
            
        return res
