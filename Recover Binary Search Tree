# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    prev = None
    p1 = None
    p2 = None
    
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        # same as morris traversal
        
    #     w1, w2, pre, parent = None, None, None, None
    #     one_already_found = False
    #     current = root
        
    #     while current:
    #         if not current.left:
                
    #             # added for checking vilation
    #             if parent and current.val< parent.val:
    #                 if not one_already_found:
    #                     w1 = parent
    #                     one_already_found = True
    #                 w2 = current
                
    #             parent = current      
    #             current = current.right
    #         else:
    #             pre = current.left
    #             while(pre.right!=None and pre.right!=current):
    #                 pre = pre.right
                
    #             if not pre.right:
    #                 pre.right = current
    #                 current = current.left
    #             else:
    #                 pre.right = None
    #                 # added for checking violation
    #                 if parent.val > current.val:
    #                     if not one_already_found:
    #                         w1 = parent
    #                         one_already_found = True
    #                     w2 = current
    #                 # Damn, this is a must:
    #                 parent = current
    #                 current = current.right
    #     if w1 and w2:            
    #         temp = w2.val
    #         w2.val = w1.val
    #         w1.val = temp
    
    
    
        self.prev = None
        self.p1 = None
        self.p2 = None
        self.inOrder(root)
        tmp = self.p1.val
        self.p1.val = self.p2.val
        self.p2.val = tmp
        
     
    def inOrder(self, root):
        if root == None:
            return
        else:
            self.inOrder(root.left)
            if self.prev == None:
                self.prev = root
            else:
                if root.val <= self.prev.val:
                    if self.p1 == None:
                        self.p1 = self.prev
                    self.p2 = root
                self.prev = root
            self.inOrder(root.right)
     
    
                    
        
    
