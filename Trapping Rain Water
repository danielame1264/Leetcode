class Solution {
public:
    int trap(int A[], int n) {
        if(n ==1 || n ==2) return 0;
        int sum=0;
        int highestIndex=0;
        int highestSize=A[0];
        for(auto i =0; i<n;i++){
            if(A[i]>highestSize){
                highestIndex = i;
                highestSize = A[i];
            }
            else continue;
        }
        int pivotIndex=0;
        int pivotSize=A[0];
        int temp =0;
        for(int i=1;i<highestIndex;i++){
            if(A[i]>pivotSize){
                sum+=temp;
                pivotIndex=i;
                pivotSize =A[i];
                temp =0;
            }
            else{
                temp+=(pivotSize-A[i]);
            }
        }
        sum+=temp;
        
        pivotIndex=n-1;
        pivotSize=A[n-1];
        temp = 0;
        
        for(int i=n-2;i>highestIndex;i--){
            if(A[i]>pivotSize){
                sum+=temp;
                pivotIndex=i;
                pivotSize =A[i];
                temp =0;
            }
            else{
                temp+=(pivotSize-A[i]);
            }
        }
        sum = sum+ temp;
        return sum;
    }
};


class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        leftmosthigh = [0 for i in range(len(height))]
        leftmax = 0
        for i in range(len(height)):
            if height[i] > leftmax: leftmax = height[i]
            leftmosthigh[i] = leftmax
        sum = 0
        rightmax = 0
        for i in reversed(range(len(height))):
            if height[i] > rightmax: rightmax = height[i]
            if min(rightmax, leftmosthigh[i]) > height[i]:
                sum += min(rightmax, leftmosthigh[i]) - height[i]
        return sum
