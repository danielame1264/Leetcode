public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> solution = new ArrayList<Integer>();
        Arrays.sort(candidates);
        helper(0,candidates,target,solution,res);
        res = new ArrayList<List<Integer>>(new LinkedHashSet<List<Integer>>(res));
        return res;
    }
    
    public void helper(int position,int[] candidates, int target, List<Integer> solution, List<List<Integer>> res){
        
        if(target==0){
            //if(res.size()==0 || !solution.equals(res.get(res.size()-1))){
                res.add(new ArrayList<Integer>(solution));
            
            
            return;
        }
        for(int i=position;i<candidates.length;i++){
            
            if(candidates[i]>target){
                return;
            }
            
            solution.add(candidates[i]);
            helper(i+1,candidates,target-candidates[i],solution,res);
            solution.remove(solution.size()-1);
        }
    }
    
    // public void sum(List<Integer> solution){
    //     int sum=0;
    //     for(Integer i ï¼š solution){
    //         sum+=i;
    //     }
    //     return sum;
    // }
}
