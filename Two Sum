class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> res;
        unordered_map<int,int> num;
        for(auto i=0;i!=numbers.size();i++){
            num[numbers[i]]=i;
        }
        for(auto i=0;i!=numbers.size();i++){
           // num.erase(numbers[i]);
            int haha = target - numbers[i];
            if(num.find(haha)!=num.end()){
                if( num[haha] != i){
                     res.push_back(i+1);
                     res.push_back(num[haha]+1);
                    return res; 
                }
             
            }
            else{
                continue;
            }
            //num[numbers[i]]=i+1;
        }
        return res;

    }
};


public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        // map's key is the value that its value(index in array) 's corresponding value needs
        // map's value is index in the array
        int[] res = new int[2];
        
        for(int i=0;i<numbers.length;i++){
            if(map.containsKey(numbers[i])){
                int index = map.get(numbers[i]);
                res[0]=index+1;
                res[1]=i+1;
                break;
            }
            else{
                map.put(target-numbers[i],i);
            }
        }
        return res;
    }
}


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        dictionary = dict()
        for i in range(len(nums)):
            if nums[i] in dictionary.keys():
                return [dictionary.get(nums[i])+1, i+1]
            else:
                dictionary.update({target-nums[i]: i})
