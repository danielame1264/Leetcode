class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        visited = [[False for i in range(len(grid[0]))] for j in range(len(grid)) ]
        number_islands = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if visited[i][j] or grid[i][j]=='0':
                    continue
                else:
                    self.bfs(grid, visited, i, j)
                    number_islands+=1
        return number_islands
    
    def bfs(self, grid, visited, x, y):
        q = []
        q.append((x,y))
        
        while q:
            cur_tuple = q.pop()
            x = cur_tuple[0]
            y = cur_tuple[1]
            visited[x][y] = True
            if x>=1 and x<len(grid) and not visited[x-1][y] and grid[x-1][y]=='1':
                q.append((x-1,y))
            if x>=0 and x<len(grid)-1 and not visited[x+1][y] and grid[x+1][y]=='1':
                q.append((x+1, y))
            if y>=1 and y<len(grid[0]) and not visited[x][y-1] and grid[x][y-1]=='1':
                q.append((x,y-1))
            if y>=0 and y<len(grid[0])-1 and not visited[x][y+1] and grid[x][y+1]=='1':
                q.append((x,y+1))
        
                
        
