class Solution(object):

    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        children_map = {x:[] for x in range(numCourses)}
        visited = {x:0 for x in range(numCourses)}  # 0: unvisited  1: visiting 2: visited
        rank_list = []
        self.cycle = False
        if not prerequisites: return [x for x in range(numCourses)]
        
        for pair in prerequisites:
            if pair[0] not in children_map[pair[1]]:
                children_map[pair[1]].append(pair[0])
        
        print children_map
        def dfs(visited, cur):
            visited[cur]=1
            for j in children_map[cur]:
                if visited[j]==1:
                    self.cycle = True
                if visited[j]==0:
                    dfs(visited, j)
            visited[cur] = 2
            rank_list.append(cur)
        
        for cur in range(numCourses):
            if visited[cur]==0:
                dfs(visited, cur)
        
        return rank_list[::-1] if not self.cycle else []
        
                
