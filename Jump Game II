public class Solution {
//    public int jump(int[] A) {
//        // one dimension dp, a array where each element represent the min step from himself to the last index
//        // iterate backwards
//        // essence is , check all its reachable index 
//        int len = A.length;
//        int[] B = new int[len];
//        for(int i=0;i<len-1;i++){
//            B[i]=Integer.MAX_VALUE;
//        }
//        B[len-1]=0;
//        
//        for(int i=len-2;i>=0;i--){
//            int canReach = A[i];
//            int min=Integer.MAX_VALUE;
//            // check all reachable
//            for(int j=1;j<=canReach;j++){
//                if((i+j)>(len-1)){
//                    break;
//                }
//                else{
//                    if(B[i+j]<min) min=B[i+j];
//                }
//            }
//            B[i]=min+1; // maybe a bug here for the break situation
//           min=Integer.MAX_VALUE; 
//        }
//        return B[0];
//        
//    }

      public int jump(int[] A){
          int len = A.length;
          if(len==0 || len==1) return 0;
          
          int jump=0;
          int start=0, end=0;
          while(true){
              jump++;
              int temp=0;
              for(int i=start; i<=end;i++){
                  temp = Math.max(temp, A[i]+i);
                   if (temp >= len-1)    // Once the largest index exceeds the array, we are done
                    return jump;
              }
              start=end+1;
              end=temp;
          }
          
      }
      
      
  }
