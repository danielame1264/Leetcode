class WordDictionary(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        self.root = TrieNode()
        
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        node = self.root
        for char in word:
            if char not in node.children:
                new_node = TrieNode()
                node.children[char] = new_node
            node = node.children[char]
        node.isWord = True
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could
        contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        node = self.root
        return self.dfs(node, word)
                
            
    def dfs(self, node, word):
        if len(word)==0:
            return node.isWord
        elif word[0] == '.':
            for letter, node in node.children.items():
                if self.dfs(node, word[1:]):
                    return True
            return False
        elif word[0] not in node.children:
            return False
        else:
            if self.dfs(node.children[word[0]], word[1:]):
                return True
            else:
                return False
            

class TrieNode:
    # Initialize your data structure here.
    def __init__(self):
        self.children = dict()
        self.isWord = False



# Your WordDictionary object will be instantiated and called as such:
# wordDictionary = WordDictionary()
# wordDictionary.addWord("word")
# wordDictionary.search("pattern")
