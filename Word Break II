// public class Solution {
//     public List<String> wordBreak(String s, Set<String> dict) {
//         List<String> res = new ArrayList<String>();
//         ArrayList<String> sb = new ArrayList<String>();
//         helper(s,dict,1,sb,res);
//         return res;
        
//     }
    
//     public void helper(String s, Set<String> dict, int start,ArrayList<String> sb, List<String> res){
//         if(start == s.length()) {
//             StringBuilder newbee = new StringBuilder();
//             for(String entry : sb){
//                 newbee.append(entry).append(' ');
//             }
//             res.add(newbee.toString().trim());
//         }
//         for(int i=start;i<s.length();i++){
//             if(dict.contains(s.substring(start,i))){
//                 sb.add(s.substring(start,i));
//                 helper(s,dict,i,sb,res);
//                 sb.remove(sb.size()-1);
//             } else {
//                 continue;
//             }
//         }
//     }
// }


public class Solution {
    ArrayList<String> wordBreak(String s, Set<String> dict) {
        int length = s.length();
        
        //create the word ending character's index list for each character
        ArrayList<ArrayList<Integer>> record = new ArrayList<ArrayList<Integer>>(length);
        for(int i = 0;i<length;i++)
            record.add(new ArrayList<Integer>());

        //each character can be the ending character of some word
        for(int end=length;end>=0;end--){

            if(end < length && record.get(end).isEmpty())
                continue;
            
            //find the starting character for the current ending character
            for(int runner = end-1;runner >= 0;runner--){
                if(dict.contains(s.substring(runner,end)))
                    record.get(runner).add(end);    //add current end to start character's list
            }
        }
        
        ArrayList<String> solutionSet = new ArrayList<String>();
        buildSolution(record,0,s,"",solutionSet);
        
        return solutionSet;
    }

    void buildSolution(ArrayList<ArrayList<Integer>> record, int current, String s, 
                String solution, ArrayList<String> solutionSet){
        
        //iterate on current character's word ending list
        for(Integer end : record.get(current)){

            String sub=s.substring(current,end);
            /*
                since the loop may have many iterations, we should keep the reference
                of "solution", rather than writing as "solution += ..."
            */
            String newSolution = solution+(current==0 ? sub : " "+sub);
            
            if(end == s.length()) 
                solutionSet.add(newSolution);
            else 
                buildSolution(record,end,s,newSolution,solutionSet);
        }
    }

}


class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: List[str]
        """
        self.res = []
        cur = ''
        self.helper(s, wordDict, cur)
        return self.res
        
    def helper(self, s, wordDict, cur):
        if len(s)==0:
            self.res.append(cur[1:])
        if self.canBreak(s, wordDict):
            for i in range(1, len(s)+1):
                if s[:i] in wordDict:
                    self.helper(s[i:], wordDict, cur+' '+s[:i])
                    
    
    def canBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: bool
        """
        dp = [False] * (len(s)+1)
        dp[0] = True
        for i in range(1, len(s)+1):
            for j in range(i):
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
        return dp[len(s)]
